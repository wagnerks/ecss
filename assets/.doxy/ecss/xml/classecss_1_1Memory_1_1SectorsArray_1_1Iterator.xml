<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kind="class" language="C++" prot="public">
    <compoundname>ecss::Memory::SectorsArray::Iterator</compoundname>
    <includes refid="SectorsArray_8h" local="no">SectorsArray.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a214c8318f3e872712628cc8a7931b768" prot="private" static="no" mutable="no">
        <type>Allocator::Cursor</type>
        <definition>Allocator::Cursor ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::cursor</definition>
        <argsstring></argsstring>
        <name>cursor</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::cursor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="272" column="19" bodyfile="ecss/memory/SectorsArray.h" bodystart="272" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a3b8b7efc4cffad5a2a418935f7f0b1c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::Iterator</definition>
        <argsstring>(const SectorsArray *array, size_t idx)</argsstring>
        <name>Iterator</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::Iterator</qualifiedname>
        <param>
          <type>const <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">SectorsArray</ref> *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Construct from owning container and linear index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">SectorsArray</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting linear index (clamped to size). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="264" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="264" bodyend="264"/>
        <references refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a3b8b7efc4cffad5a2a418935f7f0b1c0" compoundref="SectorsArray_8h" startline="264" endline="264">ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::Iterator</references>
        <referencedby refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a3b8b7efc4cffad5a2a418935f7f0b1c0" compoundref="SectorsArray_8h" startline="264" endline="264">ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::Iterator</referencedby>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a2006387765eed8815d818006e48e5334" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE <ref refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>FORCE_INLINE Iterator ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::operator+</definition>
        <argsstring>(difference_type n) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::operator+</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="268" column="23" bodyfile="ecss/memory/SectorsArray.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1af1f1d9a0f217d827ad8d647119388e5f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE <ref refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
        <definition>FORCE_INLINE Iterator &amp; ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="266" column="23" bodyfile="ecss/memory/SectorsArray.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a67c9a1b5dc839ef30bc77790c4b8ef5c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE <ref refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kindref="compound">Iterator</ref> &amp;</type>
        <definition>FORCE_INLINE Iterator &amp; ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::operator+=</definition>
        <argsstring>(difference_type n) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::operator+=</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="267" column="23" bodyfile="ecss/memory/SectorsArray.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1adb8435fd59ad927242b0662b71f3789b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE reference</type>
        <definition>FORCE_INLINE reference ecss::Memory::SectorsArray&lt; ThreadSafe, Allocator &gt;::Iterator::operator[]</definition>
        <argsstring>(difference_type n) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::operator[]</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="270" column="24" bodyfile="ecss/memory/SectorsArray.h" bodystart="270" bodyend="270"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a35a0d54be1f2365dc183e00263544d53" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator operator+</definition>
        <argsstring>(difference_type n, Iterator it) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>ecss::Memory::SectorsArray::Iterator::operator+</qualifiedname>
        <param>
          <type>difference_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator" kindref="compound">Iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="269" column="17" bodyfile="ecss/memory/SectorsArray.h" bodystart="269" bodyend="269"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Forward iterator over every sector (alive or dead). </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Returned Sector* may contain dead members. Use <ref refid="classecss_1_1Memory_1_1SectorsArray_1_1IteratorAlive" kindref="compound">IteratorAlive</ref> to skip dead ones. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ecss/memory/SectorsArray.h" line="255" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="255" bodyend="273"/>
    <listofallmembers>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a214c8318f3e872712628cc8a7931b768" prot="private" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>cursor</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a3b8b7efc4cffad5a2a418935f7f0b1c0" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>Iterator</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a2006387765eed8815d818006e48e5334" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>operator+</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a35a0d54be1f2365dc183e00263544d53" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>operator+</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1af1f1d9a0f217d827ad8d647119388e5f" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>operator++</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1a67c9a1b5dc839ef30bc77790c4b8ef5c" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>operator+=</name></member>
      <member refid="classecss_1_1Memory_1_1SectorsArray_1_1Iterator_1adb8435fd59ad927242b0662b71f3789b" prot="public" virt="non-virtual"><scope>ecss::Memory::SectorsArray::Iterator</scope><name>operator[]</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
