<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="structecss_1_1Memory_1_1RetireAllocator" kind="struct" language="C++" prot="public">
    <compoundname>ecss::Memory::RetireAllocator</compoundname>
    <includes refid="RetireAllocator_8h" local="no">RetireAllocator.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structecss_1_1Memory_1_1RetireAllocator_1a2e79a5121b41c7c3b22e920b03c7123d" prot="public" static="no">
        <type>std::true_type</type>
        <definition>using ecss::Memory::RetireAllocator&lt; T &gt;::is_always_equal =  std::true_type</definition>
        <argsstring></argsstring>
        <name>is_always_equal</name>
        <qualifiedname>ecss::Memory::RetireAllocator::is_always_equal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="90" column="1" bodyfile="ecss/memory/RetireAllocator.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structecss_1_1Memory_1_1RetireAllocator_1acdba3c1f84bfbb983e1ee85d0be4d06b" prot="public" static="no">
        <type>std::false_type</type>
        <definition>using ecss::Memory::RetireAllocator&lt; T &gt;::propagate_on_container_move_assignment =  std::false_type</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_move_assignment</name>
        <qualifiedname>ecss::Memory::RetireAllocator::propagate_on_container_move_assignment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="89" column="1" bodyfile="ecss/memory/RetireAllocator.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structecss_1_1Memory_1_1RetireAllocator_1aceb8c6a97fef1c81bfb097106400434f" prot="public" static="no">
        <type>T</type>
        <definition>using ecss::Memory::RetireAllocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>ecss::Memory::RetireAllocator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="67" column="1" bodyfile="ecss/memory/RetireAllocator.h" bodystart="67" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="structecss_1_1Memory_1_1RetireAllocator_1a6f357f10a62ad7d8122f0075d57f64d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>struct</type>
        <definition>friend struct RetireAllocator</definition>
        <argsstring></argsstring>
        <name>RetireAllocator</name>
        <qualifiedname>ecss::Memory::RetireAllocator::RetireAllocator</qualifiedname>
        <param>
          <type><ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="83" column="26" bodyfile="ecss/memory/RetireAllocator.h" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structecss_1_1Memory_1_1RetireAllocator_1a8fafbfa2185d913d7ae2308e057a1d33" prot="public" static="no" mutable="no">
        <type>RetireBin *</type>
        <definition>RetireBin* ecss::Memory::RetireAllocator&lt; T &gt;::bin</definition>
        <argsstring></argsstring>
        <name>bin</name>
        <qualifiedname>ecss::Memory::RetireAllocator::bin</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="92" column="11" bodyfile="ecss/memory/RetireAllocator.h" bodystart="92" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1a4ac4a4f0d79d993d5a7ab01217eea242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * ecss::Memory::RetireAllocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_t n)</argsstring>
        <name>allocate</name>
        <qualifiedname>ecss::Memory::RetireAllocator::allocate</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="74" column="3" bodyfile="ecss/memory/RetireAllocator.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1ac3ab3099c15a3e749647a9b034c4508e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ecss::Memory::RetireAllocator&lt; T &gt;::deallocate</definition>
        <argsstring>(T *p, size_t n) noexcept</argsstring>
        <name>deallocate</name>
        <qualifiedname>ecss::Memory::RetireAllocator::deallocate</qualifiedname>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="78" column="6" bodyfile="ecss/memory/RetireAllocator.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1ae9b5aa867f0f2257a71911e3b8b107fa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ecss::Memory::RetireAllocator&lt; T &gt;::operator!=</definition>
        <argsstring>(const RetireAllocator&lt; U &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>ecss::Memory::RetireAllocator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="87" column="6" bodyfile="ecss/memory/RetireAllocator.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1ac485ae80166f01b47a384ebd2f7caf4f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool ecss::Memory::RetireAllocator&lt; T &gt;::operator==</definition>
        <argsstring>(const RetireAllocator&lt; U &gt; &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>ecss::Memory::RetireAllocator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="85" column="6" bodyfile="ecss/memory/RetireAllocator.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1a066aeee8fcb5018916eb40a882fa77ff" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ecss::Memory::RetireAllocator&lt; T &gt;::RetireAllocator</definition>
        <argsstring>(const RetireAllocator&lt; U &gt; &amp;other) noexcept</argsstring>
        <name>RetireAllocator</name>
        <qualifiedname>ecss::Memory::RetireAllocator::RetireAllocator</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref>&lt; U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="72" column="1" bodyfile="ecss/memory/RetireAllocator.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1RetireAllocator_1a5a0e3eb8807f48a24e5f0c8cb6c99478" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::RetireAllocator&lt; T &gt;::RetireAllocator</definition>
        <argsstring>(RetireBin *bin) noexcept</argsstring>
        <name>RetireAllocator</name>
        <qualifiedname>ecss::Memory::RetireAllocator::RetireAllocator</qualifiedname>
        <param>
          <type>RetireBin *</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/RetireAllocator.h" line="69" column="10" bodyfile="ecss/memory/RetireAllocator.h" bodystart="69" bodyend="69"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Allocator that defers memory reclamation to avoid use-after-free during container reallocation. </para>
    </briefdescription>
    <detaileddescription>
<para>Standard containers like std::vector will call deallocate() on the old buffer immediately after a reallocation. In concurrent scenarios, a reader may still access the old buffer, leading to crashes or undefined behavior. <ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref> solves this by not freeing memory right away: deallocate() places the old block into a RetireBin. The user is then responsible for calling RetireBin::drainAll() at a safe point, when no readers can reference retired buffers anymore.</para>
<para>Typical usage: construct a container with a <ref refid="structecss_1_1Memory_1_1RetireAllocator" kindref="compound">RetireAllocator</ref> bound to a shared RetireBin. Push-backs that trigger reallocation will queue the old memory into the bin instead of freeing it. Later, at a known quiescent state, the program calls drainAll() to release all retired memory.</para>
<para>This approach prevents reallocation races from invalidating concurrent readers, at the cost of temporarily higher memory usage until retired blocks are drained. </para>
    </detaileddescription>
    <location file="ecss/memory/RetireAllocator.h" line="66" column="1" bodyfile="ecss/memory/RetireAllocator.h" bodystart="66" bodyend="93"/>
    <listofallmembers>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1a4ac4a4f0d79d993d5a7ab01217eea242" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>allocate</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1a8fafbfa2185d913d7ae2308e057a1d33" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>bin</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1ac3ab3099c15a3e749647a9b034c4508e" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>deallocate</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1a2e79a5121b41c7c3b22e920b03c7123d" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>is_always_equal</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1ae9b5aa867f0f2257a71911e3b8b107fa" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>operator!=</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1ac485ae80166f01b47a384ebd2f7caf4f" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>operator==</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1acdba3c1f84bfbb983e1ee85d0be4d06b" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>propagate_on_container_move_assignment</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1a5a0e3eb8807f48a24e5f0c8cb6c99478" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>RetireAllocator</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1a066aeee8fcb5018916eb40a882fa77ff" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>RetireAllocator</name></member>
      <member refid="structecss_1_1Memory_1_1RetireAllocator_1aceb8c6a97fef1c81bfb097106400434f" prot="public" virt="non-virtual"><scope>ecss::Memory::RetireAllocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
