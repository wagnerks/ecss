<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="Sector_8h" kind="file" language="C++">
    <compoundname>Sector.h</compoundname>
    <includes refid="SectorLayoutMeta_8h" local="no">ecss/memory/SectorLayoutMeta.h</includes>
    <includedby refid="ChunksAllocator_8h" local="no">ChunksAllocator.h</includedby>
    <includedby refid="Registry_8h" local="no">Registry.h</includedby>
    <includedby refid="SectorsArray_8h" local="no">SectorsArray.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>ecss/Types.h</label>
        <link refid="Types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Sector.h</label>
        <link refid="Sector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ecss/memory/SectorLayoutMeta.h</label>
        <link refid="SectorLayoutMeta_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>array</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>Registry.h</label>
        <link refid="Registry_8h_source"/>
      </node>
      <node id="2">
        <label>ChunksAllocator.h</label>
        <link refid="ChunksAllocator_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Sector.h</label>
        <link refid="Sector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SectorsArray.h</label>
        <link refid="SectorsArray_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structecss_1_1Memory_1_1Sector" prot="public">ecss::Memory::Sector</innerclass>
    <innernamespace refid="namespaceecss">ecss</innernamespace>
    <innernamespace refid="namespaceecss_1_1Memory">ecss::Memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ecss/memory/SectorLayoutMeta.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ecss::Memory<sp/>{</highlight></codeline>
<codeline lineno="19" refid="structecss_1_1Memory_1_1Sector" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(8)<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectorId<sp/>id;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>isAliveData;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mask,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{<sp/>value<sp/>?<sp/>isAliveData<sp/>|=<sp/>mask<sp/>:<sp/>isAliveData<sp/>&amp;=<sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="32" refid="structecss_1_1Memory_1_1Sector_1a97bdbd1d955b6ef49de39aad31598a07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a97bdbd1d955b6ef49de39aad31598a07" kindref="member">markAlive</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mask)<sp/>{<sp/>isAliveData<sp/>|=<sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="36" refid="structecss_1_1Memory_1_1Sector_1af0dfe2cddf616b74caef763aba18a546" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1af0dfe2cddf616b74caef763aba18a546" kindref="member">markNotAlive</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mask)<sp/>{<sp/>isAliveData<sp/>&amp;=<sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="41" refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mask)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAliveData<sp/>&amp;<sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="45" refid="structecss_1_1Memory_1_1Sector_1a93c033596cc9dfc4169828d7c9b66931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a93c033596cc9dfc4169828d7c9b66931" kindref="member">isSectorAlive</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAliveData<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" kindref="member">getMember</ref>(uint16_t<sp/>offset,<sp/>uint32_t<sp/>mask)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAliveData<sp/>&amp;<sp/>mask<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>offset))<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="55" refid="structecss_1_1Memory_1_1Sector_1a29243737670c5b6312f3a163c6536f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a29243737670c5b6312f3a163c6536f2b" kindref="member">getMember</ref>(uint16_t<sp/>offset,<sp/>uint32_t<sp/>mask)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isAliveData<sp/>&amp;<sp/>mask<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>offset))<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59" refid="structecss_1_1Memory_1_1Sector_1ab7e8b01199c126d4044cceaeb648b225" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ab7e8b01199c126d4044cceaeb648b225" kindref="member">getMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" kindref="member">getMember&lt;T&gt;</ref>(layout.offset,<sp/>layout.isAliveMask);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="62" refid="structecss_1_1Memory_1_1Sector_1aa516b8f2f90f650ccb3e4db87a2f4b3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1aa516b8f2f90f650ccb3e4db87a2f4b3e" kindref="member">getMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" kindref="member">getMember&lt;T&gt;</ref>(layout.offset,<sp/>layout.isAliveMask);<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sectorAdr,<sp/>uint16_t<sp/>offset)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sectorAdr)<sp/>+<sp/>offset);<sp/>}</highlight></codeline>
<codeline lineno="67" refid="structecss_1_1Memory_1_1Sector_1a7a44c69786654df74de5a89b3095489b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a7a44c69786654df74de5a89b3095489b" kindref="member">getMemberPtr</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sectorAdr,<sp/>uint16_t<sp/>offset)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sectorAdr)<sp/>+<sp/>offset;<sp/>}</highlight></codeline>
<codeline lineno="69" refid="structecss_1_1Memory_1_1Sector_1a7aecc31bf8d6e26103ee46b3fca96f36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORCE_INLINE<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a7aecc31bf8d6e26103ee46b3fca96f36" kindref="member">getMemberPtr</ref>(std::byte*<sp/>sectorAdr,<sp/>uint16_t<sp/>offset)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sectorAdr<sp/>+<sp/>offset;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="73" refid="structecss_1_1Memory_1_1Sector_1a0b6329a4904ee6c538f10275ddb3ef45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a0b6329a4904ee6c538f10275ddb3ef45" kindref="member">getComponentFromSector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sector,<sp/>SectorLayoutMeta*<sp/>sectorLayout)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sector)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layout<sp/>=<sp/>sectorLayout-&gt;getLayoutData&lt;T&gt;();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" kindref="member">getMember</ref>&lt;T&gt;(layout.offset,<sp/>layout.isAliveMask);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="82" refid="structecss_1_1Memory_1_1Sector_1abdf3d6ddf5e797969b6ea1b23af2ec93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1abdf3d6ddf5e797969b6ea1b23af2ec93" kindref="member">getComponentFromSector</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sector,<sp/>SectorLayoutMeta*<sp/>sectorLayout)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sector)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layout<sp/>=<sp/>sectorLayout-&gt;getLayoutData&lt;T&gt;();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1a5da8dbd10b458e833c3b7581d99f48e5" kindref="member">getMember</ref>&lt;T&gt;(layout.offset,<sp/>layout.isAliveMask);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="92" refid="structecss_1_1Memory_1_1Sector_1aa1efb92183c750337952d7c2c0d3b855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1aa1efb92183c750337952d7c2c0d3b855" kindref="member">emplaceMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memberPtr<sp/>=<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>layout.offset);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!std::is_trivially_destructible_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.destructor(memberPtr);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a97bdbd1d955b6ef49de39aad31598a07" kindref="member">markAlive</ref>(layout.isAliveMask);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(memberPtr)T(std::forward&lt;Args&gt;(args)...<sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="107" refid="structecss_1_1Memory_1_1Sector_1a78bb0047f09b53acbd5b47138e61de61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a78bb0047f09b53acbd5b47138e61de61" kindref="member">emplaceMember</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(sector);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memberPtr<sp/>=<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(sector,<sp/>layout.offset);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(!std::is_trivially_destructible_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.destructor(memberPtr);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1a97bdbd1d955b6ef49de39aad31598a07" kindref="member">markAlive</ref>(layout.isAliveMask);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(memberPtr)T{<sp/>std::forward&lt;Args&gt;(args)...<sp/>};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124" refid="structecss_1_1Memory_1_1Sector_1a86f2528f93cd8227f2067bfc14bce18a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a86f2528f93cd8227f2067bfc14bce18a" kindref="member">copyMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" kindref="member">destroyMember</ref>(layout);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(layout.isAliveMask,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset))T(from);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="132" refid="structecss_1_1Memory_1_1Sector_1aa9f0fe3a4fbcce2d1aae6dafa9f48417" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1aa9f0fe3a4fbcce2d1aae6dafa9f48417" kindref="member">moveMember</ref>(T&amp;&amp;<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" kindref="member">destroyMember</ref>(layout);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(layout.isAliveMask,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset))T(std::forward&lt;T&gt;(from));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structecss_1_1Memory_1_1Sector_1ad185dffa842832051668366c074913fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ad185dffa842832051668366c074913fa" kindref="member">copyMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" kindref="member">destroyMember</ref>(layout);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.copy(ptr,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(!!from<sp/>?<sp/>layout.isAliveMask<sp/>:<sp/>layout.isNotAliveMask,<sp/>!!from);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="structecss_1_1Memory_1_1Sector_1a987355f5d590a9cb7644b46c5c842e4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a987355f5d590a9cb7644b46c5c842e4e" kindref="member">moveMember</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" kindref="member">destroyMember</ref>(layout);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.move(ptr,<sp/>from);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(!!from<sp/>?<sp/>layout.isAliveMask<sp/>:<sp/>layout.isNotAliveMask,<sp/>!!from);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.destructor(from);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structecss_1_1Memory_1_1Sector_1a3685368b8c9d7d4d6d603cc9a05aa866" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1a3685368b8c9d7d4d6d603cc9a05aa866" kindref="member">copySector</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SectorLayoutMeta*<sp/>layouts)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(from<sp/>!=<sp/>to);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(from<sp/>&amp;&amp;<sp/>to);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a2b28c4334adb8cb98263eb0a646ad693" kindref="member">destroySector</ref>(to,<sp/>layouts);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_trivially_copyable_v&lt;Sector&gt;)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(to,<sp/>from,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to)<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>(*from);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layout<sp/>:<sp/>*layouts)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.copy(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset),<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(from,<sp/>layout.offset));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structecss_1_1Memory_1_1Sector_1ab84b95b534ce86103477d54333678571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ab84b95b534ce86103477d54333678571" kindref="member">moveSector</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>from,<sp/><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SectorLayoutMeta*<sp/>layouts)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(from<sp/>!=<sp/>to);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(from<sp/>&amp;&amp;<sp/>to);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(to);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a2b28c4334adb8cb98263eb0a646ad693" kindref="member">destroySector</ref>(to,<sp/>layouts);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to)<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>(std::move(*from));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layout<sp/>:<sp/>*layouts)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.move(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(to,<sp/>layout.offset),<sp/><ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(from,<sp/>layout.offset));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(layout.isAliveMask,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a2b28c4334adb8cb98263eb0a646ad693" kindref="member">destroySector</ref>(from,<sp/>layouts);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="structecss_1_1Memory_1_1Sector_1a2b28c4334adb8cb98263eb0a646ad693" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1a2b28c4334adb8cb98263eb0a646ad693" kindref="member">destroySector</ref>(<ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref>*<sp/>sector,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SectorLayoutMeta*<sp/>layouts)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sector<sp/>||<sp/>!sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1a93c033596cc9dfc4169828d7c9b66931" kindref="member">isSectorAlive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layouts-&gt;isTrivial())<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>layout<sp/>:<sp/>(*layouts))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sector-&gt;<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.destructor(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">ecss::Memory::Sector::getMemberPtr</ref>(sector,<sp/>layout.offset));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector-&gt;isAliveData<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1Sector_1afe5199d8210e2050208143ed8d1c42b9" kindref="member">destroyMember</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structecss_1_1Memory_1_1LayoutData" kindref="compound">LayoutData</ref>&amp;<sp/>layout)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!layout.isTrivial)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structecss_1_1Memory_1_1Sector_1ada6cfb24197b1e21b22b9922577b68d5" kindref="member">isAlive</ref>(layout.isAliveMask))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout.functionTable.destructor(<ref refid="structecss_1_1Memory_1_1Sector_1ae66d2552cf343895fb92d20b5f45fa78" kindref="member">getMemberPtr</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>layout.offset));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structecss_1_1Memory_1_1Sector_1ac9428517f26b58207a8616f06e884e62" kindref="member">setAlive</ref>(layout.isNotAliveMask,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Dummy::Sector)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Sector),<sp/></highlight><highlight class="stringliteral">&quot;Dummy<sp/>and<sp/>real<sp/>Sector<sp/>differ!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_trivial_v&lt;Sector&gt;);<sp/></highlight><highlight class="comment">//Sector<sp/>should<sp/>be<sp/>always<sp/>trivial<sp/>-<sp/>to<sp/>enable<sp/>trivially<sp/>copy<sp/>trivial<sp/>types<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="ecss/memory/Sector.h"/>
  </compounddef>
</doxygen>
