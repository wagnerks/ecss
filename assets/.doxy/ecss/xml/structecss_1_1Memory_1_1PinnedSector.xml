<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="structecss_1_1Memory_1_1PinnedSector" kind="struct" language="C++" prot="public">
    <compoundname>ecss::Memory::PinnedSector</compoundname>
    <includes refid="SectorsArray_8h" local="no">SectorsArray.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structecss_1_1Memory_1_1PinnedSector_1ae2ca925afff8c4b8738cfdf5842f55a5" prot="private" static="no" mutable="no">
        <type>SectorId</type>
        <definition>SectorId ecss::Memory::PinnedSector::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>ecss::Memory::PinnedSector::id</qualifiedname>
        <initializer>= INVALID_ID</initializer>
        <briefdescription>
<para><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> id (valid only if pinned). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="194" column="10" bodyfile="ecss/memory/SectorsArray.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structecss_1_1Memory_1_1PinnedSector_1a3b995424574c8549491be527624e3e79" prot="private" static="no" mutable="no">
        <type>const <ref refid="structecss_1_1Threads_1_1PinCounters" kindref="compound">Threads::PinCounters</ref> *</type>
        <definition>const Threads::PinCounters* ecss::Memory::PinnedSector::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <qualifiedname>ecss::Memory::PinnedSector::owner</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pin counter owner (or nullptr if released). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="193" column="28" bodyfile="ecss/memory/SectorsArray.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structecss_1_1Memory_1_1PinnedSector_1a5189d7ed0e1bb26391bd75350893fa06" prot="private" static="no" mutable="no">
        <type><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> *</type>
        <definition>Sector* ecss::Memory::PinnedSector::sec</definition>
        <argsstring></argsstring>
        <name>sec</name>
        <qualifiedname>ecss::Memory::PinnedSector::sec</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pinned sector pointer (or nullptr). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="192" column="8" bodyfile="ecss/memory/SectorsArray.h" bodystart="192" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1ac273c3157ee0de435d31bf200f3791dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> *</type>
        <definition>Sector * ecss::Memory::PinnedSector::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>ecss::Memory::PinnedSector::get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Raw sector pointer or nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="184" column="8" bodyfile="ecss/memory/SectorsArray.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a2c60770ab896bbdf813ac8a656ec6e93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SectorId</type>
        <definition>SectorId ecss::Memory::PinnedSector::getId</definition>
        <argsstring>() const</argsstring>
        <name>getId</name>
        <qualifiedname>ecss::Memory::PinnedSector::getId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pinned sector id (INVALID_ID when empty). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="190" column="10" bodyfile="ecss/memory/SectorsArray.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a77d38750bd48ea5b5aa8630640c1a1a5" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>ecss::Memory::PinnedSector::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if non-empty pin. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="188" column="10" bodyfile="ecss/memory/SectorsArray.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a24e267e189c7bf98e6f3d0fd5c892853" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> *</type>
        <definition>Sector * ecss::Memory::PinnedSector::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>ecss::Memory::PinnedSector::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Raw sector pointer for member access. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="186" column="8" bodyfile="ecss/memory/SectorsArray.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1af3efd3f41d5cd26f3f30bf737812a9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;</type>
        <definition>PinnedSector &amp; ecss::Memory::PinnedSector::operator=</definition>
        <argsstring>(const PinnedSector &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>ecss::Memory::PinnedSector::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="154" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a82737c4e3b5830542126cab865ab5dde" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;</type>
        <definition>PinnedSector &amp; ecss::Memory::PinnedSector::operator=</definition>
        <argsstring>(PinnedSector &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>ecss::Memory::PinnedSector::operator=</qualifiedname>
        <param>
          <type><ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="157" column="14" bodyfile="ecss/memory/SectorsArray.h" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a9d880ec5c916a2fda5745870113b7ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::PinnedSector</definition>
        <argsstring>()=default</argsstring>
        <name>PinnedSector</name>
        <qualifiedname>ecss::Memory::PinnedSector::PinnedSector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a262d0f630b67398dab553ad2b51c1a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::PinnedSector</definition>
        <argsstring>(const PinnedSector &amp;)=delete</argsstring>
        <name>PinnedSector</name>
        <qualifiedname>ecss::Memory::PinnedSector::PinnedSector</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a62e2f8fba8df894f2c830defc7ab4985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::PinnedSector</definition>
        <argsstring>(const Threads::PinCounters &amp;o, Sector *s, SectorId sid)</argsstring>
        <name>PinnedSector</name>
        <qualifiedname>ecss::Memory::PinnedSector::PinnedSector</qualifiedname>
        <param>
          <type>const <ref refid="structecss_1_1Threads_1_1PinCounters" kindref="compound">Threads::PinCounters</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SectorId</type>
          <declname>sid</declname>
        </param>
        <briefdescription>
<para>Pin a sector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin counters container (PinCounters instance). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw sector pointer (may be nullptr). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sid</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structecss_1_1Memory_1_1Sector" kindref="compound">Sector</ref> id (must not be INVALID_ID if s != nullptr). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="148" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1afe796427ab8e66dbca639d1dfc2e551c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::PinnedSector</definition>
        <argsstring>(PinnedSector &amp;&amp;other) noexcept</argsstring>
        <name>PinnedSector</name>
        <qualifiedname>ecss::Memory::PinnedSector::PinnedSector</qualifiedname>
        <param>
          <type><ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="156" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a2d91015ce789428760c35ce3ff696bcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ecss::Memory::PinnedSector::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <qualifiedname>ecss::Memory::PinnedSector::release</qualifiedname>
        <briefdescription>
<para>Manually release pin (safe to call multiple times). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="174" column="6" bodyfile="ecss/memory/SectorsArray.h" bodystart="174" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structecss_1_1Memory_1_1PinnedSector_1a9df1ec59f5376c7970c15b8cba848268" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::Memory::PinnedSector::~PinnedSector</definition>
        <argsstring>()</argsstring>
        <name>~PinnedSector</name>
        <qualifiedname>ecss::Memory::PinnedSector::~PinnedSector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/memory/SectorsArray.h" line="169" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="169" bodyend="169"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>RAII pin for a sector to prevent relocation / destruction while in use. </para>
    </briefdescription>
    <detaileddescription>
<para>Life-cycle:<itemizedlist>
<listitem><para>On construction, increments pin counter for the sector id (if valid).</para>
</listitem><listitem><para>On move, transfers pin ownership.</para>
</listitem><listitem><para>On destruction or <ref refid="structecss_1_1Memory_1_1PinnedSector_1a2d91015ce789428760c35ce3ff696bcb" kindref="member">release()</ref>, decrements the pin counter.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>Do NOT keep a <ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">PinnedSector</ref> beyond the lifetime of its originating <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">SectorsArray</ref>. </para>
</simplesect>
<simplesect kind="note"><para>A default-constructed (or moved-from) instance is considered &quot;empty&quot;. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ecss/memory/SectorsArray.h" line="139" column="1" bodyfile="ecss/memory/SectorsArray.h" bodystart="139" bodyend="195"/>
    <listofallmembers>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1ac273c3157ee0de435d31bf200f3791dc" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>get</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a2c60770ab896bbdf813ac8a656ec6e93" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>getId</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1ae2ca925afff8c4b8738cfdf5842f55a5" prot="private" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>id</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a77d38750bd48ea5b5aa8630640c1a1a5" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>operator bool</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a24e267e189c7bf98e6f3d0fd5c892853" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>operator-&gt;</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1af3efd3f41d5cd26f3f30bf737812a9e7" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>operator=</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a82737c4e3b5830542126cab865ab5dde" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>operator=</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a3b995424574c8549491be527624e3e79" prot="private" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>owner</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a9d880ec5c916a2fda5745870113b7ed5" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>PinnedSector</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a62e2f8fba8df894f2c830defc7ab4985" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>PinnedSector</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a262d0f630b67398dab553ad2b51c1a2b" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>PinnedSector</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1afe796427ab8e66dbca639d1dfc2e551c" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>PinnedSector</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a2d91015ce789428760c35ce3ff696bcb" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>release</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a5189d7ed0e1bb26391bd75350893fa06" prot="private" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>sec</name></member>
      <member refid="structecss_1_1Memory_1_1PinnedSector_1a9df1ec59f5376c7970c15b8cba848268" prot="public" virt="non-virtual"><scope>ecss::Memory::PinnedSector</scope><name>~PinnedSector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
