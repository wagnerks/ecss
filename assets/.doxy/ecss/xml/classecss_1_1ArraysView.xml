<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="classecss_1_1ArraysView" kind="class" language="C++" prot="public">
    <compoundname>ecss::ArraysView</compoundname>
    <includes refid="Registry_8h" local="no">Registry.h</includes>
    <innerclass refid="structecss_1_1ArraysView_1_1EndIterator" prot="public">ecss::ArraysView::EndIterator</innerclass>
    <innerclass refid="classecss_1_1ArraysView_1_1Iterator" prot="public">ecss::ArraysView::Iterator</innerclass>
    <templateparamlist>
      <param>
        <type>bool</type>
        <declname>ThreadSafe</declname>
        <defname>ThreadSafe</defname>
      </param>
      <param>
        <type>typename Allocator</type>
      </param>
      <param>
        <type>bool</type>
        <declname>Ranged</declname>
        <defname>Ranged</defname>
      </param>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename ...</type>
        <declname>CompTypes</declname>
        <defname>CompTypes</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classecss_1_1ArraysView_1a9afd1292b9878a5cff20ad881ac783b3" prot="private" static="no">
        <type><ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">Memory::SectorsArray</ref>&lt; ThreadSafe, Allocator &gt;</type>
        <definition>using ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::Sectors =  Memory::SectorsArray&lt;ThreadSafe, Allocator&gt;</definition>
        <argsstring></argsstring>
        <name>Sectors</name>
        <qualifiedname>ecss::ArraysView::Sectors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="823" column="1" bodyfile="ecss/Registry.h" bodystart="823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classecss_1_1ArraysView_1a03ad7ba6030ce32fd8f72515243180b8" prot="private" static="no">
        <type>Sectors::IteratorAlive</type>
        <definition>using ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::SectorsIt =  Sectors::IteratorAlive</definition>
        <argsstring></argsstring>
        <name>SectorsIt</name>
        <qualifiedname>ecss::ArraysView::SectorsIt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="824" column="1" bodyfile="ecss/Registry.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classecss_1_1ArraysView_1aa24d0eff361443ba61a0c93dd77fd21e" prot="private" static="no">
        <type>Sectors::RangedIterator</type>
        <definition>using ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::SectorsRangeIt =  Sectors::RangedIterator</definition>
        <argsstring></argsstring>
        <name>SectorsRangeIt</name>
        <qualifiedname>ecss::ArraysView::SectorsRangeIt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="825" column="1" bodyfile="ecss/Registry.h" bodystart="825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classecss_1_1ArraysView_1a2ba462a54a874cc06eaf56171cf9edb5" prot="private" static="no">
        <type><ref refid="structecss_1_1TypeAccessInfo" kindref="compound">TypeAccessInfo</ref></type>
        <definition>using ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::TypeInfo =  TypeAccessInfo</definition>
        <argsstring></argsstring>
        <name>TypeInfo</name>
        <qualifiedname>ecss::ArraysView::TypeInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="826" column="1" bodyfile="ecss/Registry.h" bodystart="826" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classecss_1_1ArraysView_1ae10ff5d124ead8b519eaf426b2f56df3" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::CTCount</definition>
        <argsstring></argsstring>
        <name>CTCount</name>
        <qualifiedname>ecss::ArraysView::CTCount</qualifiedname>
        <initializer>= sizeof...(CompTypes)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="828" column="25" bodyfile="ecss/Registry.h" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classecss_1_1ArraysView_1a9f76d516029d8284b0889885d4cd01ab" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::TypesCount</definition>
        <argsstring></argsstring>
        <name>TypesCount</name>
        <qualifiedname>ecss::ArraysView::TypesCount</qualifiedname>
        <initializer>= sizeof...(CompTypes) + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="829" column="25" bodyfile="ecss/Registry.h" bodystart="829" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classecss_1_1ArraysView_1a6090aa8762378e4bad0fbbdc605c8a7b" prot="private" static="no" mutable="no">
        <type><ref refid="classecss_1_1ArraysView_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::mBeginIt</definition>
        <argsstring></argsstring>
        <name>mBeginIt</name>
        <qualifiedname>ecss::ArraysView::mBeginIt</qualifiedname>
        <briefdescription>
<para>Cached begin iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="1049" column="10" bodyfile="ecss/Registry.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classecss_1_1ArraysView_1a58a167a5f2f3ca8be2c8963112504a92" prot="private" static="no" mutable="no">
        <type>std::conditional_t&lt; ThreadSafe, std::array&lt; <ref refid="structecss_1_1Memory_1_1PinnedSector" kindref="compound">Memory::PinnedSector</ref>, TypesCount &gt;, Dummy &gt;</type>
        <definition>std::conditional_t&lt;ThreadSafe, std::array&lt;Memory::PinnedSector, TypesCount&gt;, Dummy&gt; ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::mPins</definition>
        <argsstring></argsstring>
        <name>mPins</name>
        <qualifiedname>ecss::ArraysView::mPins</qualifiedname>
        <briefdescription>
<para>Back-sector pinning for bound safety (thread-safe build). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="1048" column="20" bodyfile="ecss/Registry.h" bodystart="1048" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classecss_1_1ArraysView_1a6bf64623b40c9158d87cac69a80145e3" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::ArraysView</definition>
        <argsstring>(Registry&lt; ThreadSafe, Allocator &gt; *manager) noexcept</argsstring>
        <name>ArraysView</name>
        <qualifiedname>ecss::ArraysView::ArraysView</qualifiedname>
        <param>
          <type><ref refid="classecss_1_1Registry" kindref="compound">Registry</ref>&lt; ThreadSafe, Allocator &gt; *</type>
          <declname>manager</declname>
        </param>
    <requiresclause>(!Ranged)    </requiresclause>
        <briefdescription>
<para>Construct a full-range view (Ranged=false specialization). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="959" column="10" bodyfile="ecss/Registry.h" bodystart="959" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1a4d6cd4943170791c265f2377e89e3247" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::ArraysView</definition>
        <argsstring>(Registry&lt; ThreadSafe, Allocator &gt; *manager, const Ranges&lt; EntityId &gt; &amp;ranges={}) noexcept</argsstring>
        <name>ArraysView</name>
        <qualifiedname>ecss::ArraysView::ArraysView</qualifiedname>
        <param>
          <type><ref refid="classecss_1_1Registry" kindref="compound">Registry</ref>&lt; ThreadSafe, Allocator &gt; *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>const Ranges&lt; EntityId &gt; &amp;</type>
          <declname>ranges</declname>
          <defval>{}</defval>
        </param>
    <requiresclause>(Ranged)    </requiresclause>
        <briefdescription>
<para>Construct a ranged view (Ranged=true specialization). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="962" column="10" bodyfile="ecss/Registry.h" bodystart="962" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1aafc7eefddcabf01e9be9a6ab90581b0c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE <ref refid="classecss_1_1ArraysView_1_1Iterator" kindref="compound">Iterator</ref></type>
        <definition>FORCE_INLINE Iterator ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>ecss::ArraysView::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classecss_1_1ArraysView_1_1Iterator" kindref="compound">Iterator</ref> to first alive element (or end if empty). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="952" column="23" bodyfile="ecss/Registry.h" bodystart="952" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1a21fb1319552c222c89cbef13b34ff001" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE bool</type>
        <definition>FORCE_INLINE bool ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>ecss::ArraysView::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if there are no elements to iterate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="965" column="19" bodyfile="ecss/Registry.h" bodystart="965" bodyend="965"/>
        <references refid="classecss_1_1ArraysView_1a2c8f312c03b2e9cfb5b36907d93059e5" compoundref="Registry_8h" startline="955" endline="955">ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::end</references>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1a2c8f312c03b2e9cfb5b36907d93059e5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>FORCE_INLINE <ref refid="structecss_1_1ArraysView_1_1EndIterator" kindref="compound">EndIterator</ref></type>
        <definition>FORCE_INLINE EndIterator ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>ecss::ArraysView::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Sentinel end marker. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="955" column="26" bodyfile="ecss/Registry.h" bodystart="955" bodyend="955"/>
        <referencedby refid="classecss_1_1ArraysView_1a21fb1319552c222c89cbef13b34ff001" compoundref="Registry_8h" startline="965" endline="965">ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::empty</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classecss_1_1ArraysView_1a36c45808e1cd83fed6da045e3d72109b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">Sectors</ref> *, SectorsRangeIt &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; Sectors *, SectorsRangeIt &gt; &gt; ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::fillOtherIterators</definition>
        <argsstring>(const std::array&lt; Sectors *, TypesCount &gt; &amp;arrays, const Ranges&lt; EntityId &gt; &amp;ranges)</argsstring>
        <name>fillOtherIterators</name>
        <qualifiedname>ecss::ArraysView::fillOtherIterators</qualifiedname>
        <param>
          <type>const std::array&lt; <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">Sectors</ref> *, TypesCount &gt; &amp;</type>
          <declname>arrays</declname>
        </param>
        <param>
          <type>const Ranges&lt; EntityId &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
<para>Build secondary iterators for component arrays different from main. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="1013" column="13" bodyfile="ecss/Registry.h" bodystart="1013" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1a85dec2110b02f612e51a4328dc9beecc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::init</definition>
        <argsstring>(Registry&lt; ThreadSafe, Allocator &gt; *manager, const Ranges&lt; EntityId &gt; &amp;ranges={})</argsstring>
        <name>init</name>
        <qualifiedname>ecss::ArraysView::init</qualifiedname>
        <param>
          <type><ref refid="classecss_1_1Registry" kindref="compound">Registry</ref>&lt; ThreadSafe, Allocator &gt; *</type>
          <declname>manager</declname>
        </param>
        <param>
          <type>const Ranges&lt; EntityId &gt; &amp;</type>
          <declname>ranges</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="968" column="6" bodyfile="ecss/Registry.h" bodystart="968" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1ae2cff9f89cce121b4dd997811d4daf57" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>FORCE_INLINE std::array&lt; <ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">Sectors</ref> *, TypesCount &gt;</type>
        <definition>FORCE_INLINE std::array&lt; Sectors *, TypesCount &gt; ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::initArrays</definition>
        <argsstring>(Registry&lt; ThreadSafe, Allocator &gt; *registry) noexcept</argsstring>
        <name>initArrays</name>
        <qualifiedname>ecss::ArraysView::initArrays</qualifiedname>
        <param>
          <type><ref refid="classecss_1_1Registry" kindref="compound">Registry</ref>&lt; ThreadSafe, Allocator &gt; *</type>
          <declname>registry</declname>
        </param>
        <briefdescription>
<para>Resolve and fetch all involved sectors arrays (lazily creates if needed). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="1037" column="25" bodyfile="ecss/Registry.h" bodystart="1037" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classecss_1_1ArraysView_1a6805f41f137a92b5f0e5febb023598f6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Ranges&lt; EntityId &gt;</type>
        <definition>Ranges&lt; EntityId &gt; ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::initRange</definition>
        <argsstring>(Sectors *sectorsArray, const Ranges&lt; EntityId &gt; &amp;_ranges, size_t i=0)</argsstring>
        <name>initRange</name>
        <qualifiedname>ecss::ArraysView::initRange</qualifiedname>
        <param>
          <type><ref refid="classecss_1_1Memory_1_1SectorsArray" kindref="compound">Sectors</ref> *</type>
          <declname>sectorsArray</declname>
        </param>
        <param>
          <type>const Ranges&lt; EntityId &gt; &amp;</type>
          <declname>_ranges</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize effective iteration ranges (and pin upper bound if thread-safe). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="982" column="8" bodyfile="ecss/Registry.h" bodystart="982" bodyend="1010"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classecss_1_1ArraysView_1a640953cc2f2e482c9808dcb520ada170" prot="private" static="yes" consteval="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>FORCE_INLINE size_t consteval</type>
        <definition>static FORCE_INLINE size_t consteval ecss::ArraysView&lt; ThreadSafe, Allocator, Ranged, T, CompTypes &gt;::getIndex</definition>
        <argsstring>() noexcept</argsstring>
        <name>getIndex</name>
        <qualifiedname>ecss::ArraysView::getIndex</qualifiedname>
        <briefdescription>
<para>Get compile-time index of a given component type within the typelist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ecss/Registry.h" line="1030" column="38" bodyfile="ecss/Registry.h" bodystart="1030" bodyend="1033"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Iterable view over entities with one main component and optional additional components. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ThreadSafe</parametername>
</parameternamelist>
<parameterdescription>
<para>Mirrors <ref refid="classecss_1_1Registry" kindref="compound">Registry</ref> thread-safe flag (affects pinning). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator used by sectors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ranged</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this view limits iteration to provided ranges. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Main component type (drives iteration order). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional component types optionally retrieved per entity.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Semantics:<itemizedlist>
<listitem><para>Iterates only sectors where main component T is alive.</para>
</listitem><listitem><para>For each entity id, returns pointers (T*, optional others may be nullptr if absent).</para>
</listitem><listitem><para>In ranged mode, entity ranges are translated to nearest sector indices (clamped).</para>
</listitem></itemizedlist>
</para>
<para>Thread safety:<itemizedlist>
<listitem><para>ThreadSafe=true: Back sector pinning ensures iteration upper bound stability.</para>
</listitem><listitem><para>Non-main components may be null if not present or not grouped in same array.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>Do not cache raw pointers across mutating frames unless externally synchronized. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ecss/Registry.h" line="822" column="1" bodyfile="ecss/Registry.h" bodystart="822" bodyend="1050"/>
    <listofallmembers>
      <member refid="classecss_1_1ArraysView_1a6bf64623b40c9158d87cac69a80145e3" prot="public" virt="non-virtual"><scope>ecss::ArraysView</scope><name>ArraysView</name></member>
      <member refid="classecss_1_1ArraysView_1a4d6cd4943170791c265f2377e89e3247" prot="public" virt="non-virtual"><scope>ecss::ArraysView</scope><name>ArraysView</name></member>
      <member refid="classecss_1_1ArraysView_1aafc7eefddcabf01e9be9a6ab90581b0c" prot="public" virt="non-virtual"><scope>ecss::ArraysView</scope><name>begin</name></member>
      <member refid="classecss_1_1ArraysView_1ae10ff5d124ead8b519eaf426b2f56df3" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>CTCount</name></member>
      <member refid="classecss_1_1ArraysView_1a21fb1319552c222c89cbef13b34ff001" prot="public" virt="non-virtual"><scope>ecss::ArraysView</scope><name>empty</name></member>
      <member refid="classecss_1_1ArraysView_1a2c8f312c03b2e9cfb5b36907d93059e5" prot="public" virt="non-virtual"><scope>ecss::ArraysView</scope><name>end</name></member>
      <member refid="classecss_1_1ArraysView_1a36c45808e1cd83fed6da045e3d72109b" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>fillOtherIterators</name></member>
      <member refid="classecss_1_1ArraysView_1a640953cc2f2e482c9808dcb520ada170" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>getIndex</name></member>
      <member refid="classecss_1_1ArraysView_1a85dec2110b02f612e51a4328dc9beecc" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>init</name></member>
      <member refid="classecss_1_1ArraysView_1ae2cff9f89cce121b4dd997811d4daf57" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>initArrays</name></member>
      <member refid="classecss_1_1ArraysView_1a6805f41f137a92b5f0e5febb023598f6" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>initRange</name></member>
      <member refid="classecss_1_1ArraysView_1a6090aa8762378e4bad0fbbdc605c8a7b" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>mBeginIt</name></member>
      <member refid="classecss_1_1ArraysView_1a58a167a5f2f3ca8be2c8963112504a92" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>mPins</name></member>
      <member refid="classecss_1_1ArraysView_1a9afd1292b9878a5cff20ad881ac783b3" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>Sectors</name></member>
      <member refid="classecss_1_1ArraysView_1a03ad7ba6030ce32fd8f72515243180b8" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>SectorsIt</name></member>
      <member refid="classecss_1_1ArraysView_1aa24d0eff361443ba61a0c93dd77fd21e" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>SectorsRangeIt</name></member>
      <member refid="classecss_1_1ArraysView_1a2ba462a54a874cc06eaf56171cf9edb5" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>TypeInfo</name></member>
      <member refid="classecss_1_1ArraysView_1a9f76d516029d8284b0889885d4cd01ab" prot="private" virt="non-virtual"><scope>ecss::ArraysView</scope><name>TypesCount</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
